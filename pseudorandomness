type seed[fixed, large].
type Codominio[fixed, large].
const mark: bitstring.
fun G'(seed) : Codominio.
fun G(seed): Codominio.
forall x:seed; G(x)<>G'(x).
param nA, nB, n1, n2, n3.
event distinguished.
query event distinguished ==> false.

proba POW.
equiv
	foreach i1 <=n1 do
				w <-R Codominio;
				(Ow():=return(w)|
	foreach i2 <= n2 do Oeq(b': bool):=return (b'=true) |
		Ob():=return (true))
	   

    <=(0)=> (*da definire*)
    
	foreach i1<=n1 do
			r <-R seed;
			(Ow():=return (G'(r))|
	foreach i2<=n2 do b1<-R bool;	
			Oeq(b': bool):= if defined(k) then  return (true)
							else return (b1)|
			Ob():=let k:bitstring = mark in return(false)).

let processA =
		foreach i2 <= nA do
		        Ow() := if(b=true) then return(w) else return (G(r)).
let processB = 
			foreach i1 <= nB do 
				Oeq(b': bool) := if(b' = b) then 
											event distinguished 
							else end.
process
		foreach i3<=n3 do Og():= r <-R seed; b <-R bool; w<-R Codominio; return;
		(processA| processB)	
