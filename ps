type nbits [fixed].     (* stringhe di lunghezza  n *)
type np1bits [fixed].   (* stringhe di lunghezza  n+1 *)
type np2bits [fixed].   (* stringhe di lunghezza  n+2 *)
type np3bits [fixed].   (* stringhe di lunghezza  n+2 *)
param n1.

fun concatnp1(np1bits,bool):np2bits.
fun concatnp2(np1bits,bool, bool):np3bits.

equiv 
      foreach i1<=n1 do
            r <-R np1bits;
		    b <-R bool;
            OGet():=return (concatnp1(r,b))
      <=(0)=> 
     foreach i1 <=n1 do
            w <-R np2bits;
            OGet():=return(w).

equiv
	foreach i1<=n1 do
			r<-R np1bits;
			b'<-R bool;
			b''<-R bool;
			OGet():=return(concatnp2(r, b'', b'))
	<=(0)=>
	foreach i1<=n1 do
			w<-R np3bits;
			OGet():=return(w).

fun getn(np1bits):nbits.
fun getlast(np1bits):bool.
equiv
       foreach i1<=n1 do
             r <-R np1bits;(
             OGetn():=return (getn(r)) |
             OGetlast():=return (getlast(r)))
       <=(0)=>
      foreach i1 <=n1 do
              (
              OGetn():= w <-R nbits;return(w) |
              OGetlast():=wl <-R bool;return(wl)
              ).
fun getn1(np2bits):nbits.
fun getlast1(np2bits):bool.
equiv 
      foreach i1<=n1 do
            r <-R np2bits;(
		    OGetn():=return (getn1(r)) |
            OGetlast():=return (getlast1(r)))
      <=(0)=>
     foreach i1 <=n1 do
             (
             OGetn():= w <-R nbits;return(w) |
	     	 OGetlast():=wl <-R bool;return(wl)
	     	 ).

fun G'(nbits): np1bits.
equiv
    foreach i1<=n1 do
            	r <-R nbits;
            	OGet():=return (G'(r))
      <=(0)=> (* To define *)
     foreach i1 <=n1 do
              	w <-R np1bits;
              	OGet():=return(w).

query secret1 w3.


process
        O():=
             r<-R nbits;
             let x' = G'(r) in
             let y' = getn(x') in
             let b' = getlast(x') in
    	     let x''=G'(y') in
             let y''=getn(x'') in
	     let b''=getlast(x'') in
             w3:np3bits <-concatnp2(G'(y''), b'', b');
return


